{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".. _quickstart:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quickstart\n",
    "==========\n",
    "This notebook was made with the following version of FEMpy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.0'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import FEMpy\n",
    "FEMpy.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FEMpy can be used to solve Poisson equations on 1D and 2D domains. For this example, let us consider the problem:\n",
    "\n",
    "$$-\\frac{{\\rm d}}{{\\rm d} x} \\left( e^x \\frac{{\\rm d}}{{\\rm d} x} u(x)\\right) = -e^x [\\cos x -2\\sin x - x \\cos x - x \\sin x]; x \\in [0, 1]$$\n",
    "$$u(0) = 0, u(1) = \\cos(1)$$\n",
    "\n",
    "To start, we will need to import our necessary aditional packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us define our coefficient and source functions,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "coefficient_function = lambda x: np.exp(x)\n",
    "source_function = lambda x: -np.exp(x) * (np.cos(x) - 2*np.sin(x) - x*np.cos(x) - x*np.sin(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And our boundary condition,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dirichlet_function(x):\n",
    "    if x == 0:\n",
    "        return 0\n",
    "    elif x == 1:\n",
    "        return np.cos(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under the Galerkin formulation, we can write our differiential equation as\n",
    "\n",
    "$$\\int_a^b c u' v' {\\rm d}x = \\int_a^b f v {\\rm d}x$$\n",
    "\n",
    "where $v(x)$ is a test function. We then can choose our test and trial basis functions such that\n",
    "\n",
    "$$ u_h \\in \\{\\phi \\in C[a,b] \\mid \\phi(x) \\text{ linear on each } [x_n, x_{n+1}]; (n = 1,2,\\dotsc,N)\\} $$\n",
    "\n",
    "and\n",
    "\n",
    "$$ \\int_a^b c u_h' v_h' {\\rm d}x = \\int_a^b f v_h {\\rm d}x $$\n",
    "\n",
    "for any $v_h \\in U_h$ Thus, we can define our test and trial basis function basis functions by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "basis = FEMpy.IntervalBasis1D('linear')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can set up our mesh using a step size of $h=1/4$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh = FEMpy.Interval1D(left=0, right=1, h=1/4, basis_type='linear')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The boundary conditions are defined by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "bcs = FEMpy.BoundaryConditions(mesh, boundary_types=('dirichlet', 'dirichlet'), dirichlet_fun=dirichlet_function)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can input our mesh, basis functions, and boundary conditions into our Poisson equation then call our solver."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.24411715, 0.44112525, 0.55036422, 0.54030231])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poisson_eq = FEMpy.Poisson1D(mesh, fe_test_basis=basis, fe_trial_basis=basis, boundary_conditions=bcs)\n",
    "poisson_eq.solve(coefficient_function, source_function)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
